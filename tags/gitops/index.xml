<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gitops on ServiceMesher</title>
    <link>https://servicemesher.github.io/tags/gitops/</link>
    <description>Recent content in Gitops on ServiceMesher</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 31 May 2018 21:12:03 +0800</lastBuildDate>
    
	<atom:link href="https://servicemesher.github.io/tags/gitops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Istio 的 GitOps——像代码一样管理 Istio 配置</title>
      <link>https://servicemesher.github.io/blog/gitops-for-istio-manage-istio-config-like-code/</link>
      <pubDate>Thu, 31 May 2018 21:12:03 +0800</pubDate>
      
      <guid>https://servicemesher.github.io/blog/gitops-for-istio-manage-istio-config-like-code/</guid>
      <description>译者：Jimmy Song
原文地址：GitOps for Istio - Manage Istio Config like Code
 在今年的哥本哈根 Kubecon 大会上，Weaveworks 的 CEO Alexis Richardson 与 Varun Talwar（来自一家隐形创业公司）谈到了 GitOps 工作流程和 Istio。会后 Weaveworks 的 Stefan Prodan 进行了的演示，介绍如何使用 GitOps 上线和管理 Istio 的金丝雀部署。
会谈和演示中解释了：
 什么是 GitOps？为什么需要它？ Istio 和 GitOps 的最佳实践是如何管理在其上运行的应用程序的。 如何使用 GitOps 工作流程和 Istio 进行金丝雀部署。  什么是GitOps？ GitOps 是实现持续交付的一种方式。“GitOps 使用 Git 作为声明式基础架构和应用程序的真实来源” Alexis Richardson 说。
当对 Git 进行更改时，自动化交付管道会上线对基础架构的更改。但是这个想法还可以更进一步——使用工具来比较实际的生产状态和源代码控制中描述的状态，然后告诉你什么时候集群的状态跟描述的不符。
Git 启用声明式工具 通过使用 Git 这样的声明式工具可以对整套配置文件做版本控制。通过将 Git 作为唯一的配置来源，可以很方便的复制整套基础架构，从而将系统的平均恢复时间从几小时缩短到几分钟。
GitOps 赋能开发人员拥抱运维 Weave Cloud 的 GitOps 核心机制在于 CI/CD 工具，其关键是支持 Git 集群同步的持续部署（CD）和发布管理。Weave Cloud 部署专为版本控制系统和声明式应用程序堆栈而设计。以往开发人员都是使用 Git 管理代码和提交 PR（Pull Request），现在他们也可以使用 Git 来加速和简化 Kubernetes 和 Istio 等其他声明式技术的运维工作。</description>
    </item>
    
  </channel>
</rss>